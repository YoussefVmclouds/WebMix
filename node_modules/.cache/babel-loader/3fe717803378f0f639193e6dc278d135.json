{"remainingRequest":"/Users/youssef/Downloads/WebMix/node_modules/babel-loader/lib/index.js!/Users/youssef/Downloads/WebMix/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/youssef/Downloads/WebMix/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/youssef/Downloads/WebMix/src/views/JanusVideoPGM.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/youssef/Downloads/WebMix/src/views/JanusVideoPGM.vue","mtime":1648137724439},{"path":"/Users/youssef/Downloads/WebMix/node_modules/cache-loader/dist/cjs.js","mtime":1644235715462},{"path":"/Users/youssef/Downloads/WebMix/node_modules/babel-loader/lib/index.js","mtime":1644235715748},{"path":"/Users/youssef/Downloads/WebMix/node_modules/cache-loader/dist/cjs.js","mtime":1644235715462},{"path":"/Users/youssef/Downloads/WebMix/node_modules/vue-loader/lib/index.js","mtime":1644235714281}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["JanusVideoPGM.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <!-- Janus Video -->\n  <div>\n    <div>\n    <video\n      :id=\"`janusVideoPGM`\"\n      class=\"janus-video\"\n      playsinline\n      autoplay\n      width= 100%\n      height= auto\n      controls\n      muted\n    ></video>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Janus from './janus'\n\nexport default {\n  name: 'JanusVideo',\n  props: {\n    // cameras: {\n    //   type: Array,\n    //   required: true\n    // },\n    janus: {\n      type: Object\n    }\n  },\n  data () {\n    return {\n      streaming: [],\n      cameraPGM: [],\n      serverList:[],\n      watchID:null,\n    }\n  },\n  mounted () {\n    this.initJanus()\n  },\n  methods: {\n    //test\n        initJanus () {\n        //  this.janus.attach.bind({x:1})\n         this.janus.attach(\n          {\n            opaqueId: 'test-',\n            plugin: 'janus.plugin.streaming',\n            success:  (pluginHandle) =>{\n            // console.log(`iteration ${i} janus attach - onSuccess called, plugin handle::`, pluginHandle)\n              if (pluginHandle) {\n                // console.log('pluginHandle=', pluginHandle)\n                let body = { 'request': 'list' }\n                // let body = { 'request': 'watch', id: parseInt('123') }\n                // console.log(`iteration ${i} sending watch request::`)\n                      this.watchID = this.$route.query.pgm\n                        console.log(\"Looking for (\",this.watchID, \") as PGM view\")\n                pluginHandle.send({ 'message': body,\n                  success: (result)=> {\n                    this.serverList=result.list\n                    this.serverList.forEach(element => {\n                    if(this.watchID !=null){\n                      if(element.description.search(this.watchID)>-1){\n                        this.cameraPGM.push(element.id)\n                      }\n                    }\n                    });\n                    // test\n  const vm = this\nfor (let i = 0; i < vm.cameraPGM.length; i++) {\n        // console.log(`this is iteration ${i.id} of the for loop`)\n        this.janus.attach(\n          {\n            opaqueId: 'test-' + i,\n\n            plugin: 'janus.plugin.streaming',\n            success: function (pluginHandle) {\n              // console.log(`iteration ${i} janus attach - onSuccess called, plugin handle::`, pluginHandle)\n              if (pluginHandle) {\n                // console.log('pluginHandle=', pluginHandle)\n                vm.streaming.push({ id: i, plugin: pluginHandle })\n                // vm.streaming.push({ id: parseInt('1'), plugin: pluginHandle })\n                let body = { 'request': 'watch', id: vm.cameraPGM[i] }\n                // let body = { 'request': 'watch', id: parseInt('1') }\n                // console.log(`iteration ${i} sending watch request::${body}`)\n                pluginHandle.send({ 'message': body })\n              }\n            },\n            error: function (error) { console.log(error) },\n            onmessage: function (msg, jsep) {\n              // console.log(`iteration ${i} new message received! msg::`, msg)\n              // console.log(`iteration ${i} the accompanying jsep was::`, jsep)\n\n              if (jsep !== undefined && jsep !== null) {\n                // console.log(`iteration ${i} jsep was not null or undefined THIS IS GOOD`)\n\n                const foundStream = vm.streaming.find(s => s.id === i)\n\n                if (jsep.type === 'offer') {\n                //   console.log(`iteration ${i} the jsep type was an offer, lets make an answer`)\n                  foundStream.plugin.createAnswer(\n                    {\n                      jsep,\n                      media: { audioSend: false, videoSend: false },\n                      success: function (jsep) {\n                        // console.log(`iteration ${i} sending a message to request the stream starts`)\n                        const body = { 'request': 'start' }\n\n                        foundStream.plugin.send({ 'message': body, 'jsep': jsep })\n                      },\n                      error: function (error) {\n                        Janus.error('WebRTC error:', error)\n                      }\n                    }\n                  )\n                }\n              }\n            },\n            onremotestream: function (stream) {\n            //   console.log(`iteration ${i} on remote stream being called`)\n              const element = document.getElementById(`janusVideoPGM`)\n              Janus.attachMediaStream(element, stream)\n            },\n          })\n      }\n                    // end test\n                    },\n                  error: function (error) { console.log(error) },\n\n                    })\n              }\n            }});\n      const vm = this\n      for (let i = 0; i < vm.cameraPGM.length; i++) {\n        // console.log(`this is iteration ${i.id} of the for loop`)\n        this.janus.attach(\n          {\n            opaqueId: 'test-' + i,\n\n            plugin: 'janus.plugin.streaming',\n            success: function (pluginHandle) {\n              // console.log(`iteration ${i} janus attach - onSuccess called, plugin handle::`, pluginHandle)\n              if (pluginHandle) {\n                // console.log('pluginHandle=', pluginHandle)\n\n                // vm.streaming.push({ id: vm.cameras[i], plugin: pluginHandle })\n                vm.streaming.push({ id: parseInt('1'), plugin: pluginHandle })\n\n                // let body = { 'request': 'watch', id: i }\n                let body = { 'request': 'watch', id: parseInt('1') }\n\n                // console.log(`iteration ${i} sending watch request::${body}`)\n\n                pluginHandle.send({ 'message': body })\n              }\n            },\n            error: function (error) { console.log(error) },\n            onmessage: function (msg, jsep) {\n              // console.log(`iteration ${i} new message received! msg::`, msg)\n              // console.log(`iteration ${i} the accompanying jsep was::`, jsep)\n\n              if (jsep !== undefined && jsep !== null) {\n                // console.log(`iteration ${i} jsep was not null or undefined THIS IS GOOD`)\n\n                const foundStream = vm.streaming.find(s => s.id === i)\n\n                if (jsep.type === 'offer') {\n                //   console.log(`iteration ${i} the jsep type was an offer, lets make an answer`)\n                  foundStream.plugin.createAnswer(\n                    {\n                      jsep,\n                      media: { audioSend: false, videoSend: false },\n                      success: function (jsep) {\n                        // console.log(`iteration ${i} sending a message to request the stream starts`)\n                        const body = { 'request': 'start' }\n\n                        foundStream.plugin.send({ 'message': body, 'jsep': jsep })\n                      },\n                      error: function (error) {\n                        Janus.error('WebRTC error:', error)\n                      }\n                    }\n                  )\n                }\n              }\n            },\n            onremotestream: function (stream) {\n            //   console.log(`iteration ${i} on remote stream being called`)\n              const element = document.getElementById(`janusVideo${i}`)\n              Janus.attachMediaStream(element, stream)\n            },\n          })\n      }\n    }\n\n    //end test\n    //Orignial\n    // Init Janus\n  //   initJanus () {\n  //        this.janus.attach(\n  //         {\n  //           opaqueId: 'test-',\n\n  //           plugin: 'janus.plugin.streaming',\n  //           success: function (pluginHandle) {\n  //             // console.log(`iteration ${i} janus attach - onSuccess called, plugin handle::`, pluginHandle)\n  //             if (pluginHandle) {\n  //               // console.log('pluginHandle=', pluginHandle)\n\n\n  //               let body = { 'request': 'list' }\n  //               // let body = { 'request': 'watch', id: parseInt('123') }\n\n  //               // console.log(`iteration ${i} sending watch request::`)\n\n  //               pluginHandle.send({ 'message': body,success: function(result) {console.log(result)} })\n  //             }\n  //           }});\n  //     const vm = this\n  //     for (let i = 0; i < this.cameraPGM.length; i++) {\n  //       // console.log(`this is iteration ${i} of the for loop`)\n  //       this.janus.attach(\n  //         {\n  //           opaqueId: 'test-' + i,\n\n  //           plugin: 'janus.plugin.streaming',\n  //           success: function (pluginHandle) {\n  //             // console.log(`iteration ${i} janus attach - onSuccess called, plugin handle::`, pluginHandle)\n  //             if (pluginHandle) {\n  //               // console.log('pluginHandle=', pluginHandle)\n\n  //               vm.streaming.push({ id: i, plugin: pluginHandle })\n\n  //               // let body = { 'request': 'watch', id: i }\n  //               let body = { 'request': 'watch', id: parseInt('123') }\n\n  //               // console.log(`iteration ${i} sending watch request::`)\n\n  //               pluginHandle.send({ 'message': body })\n  //             }\n  //           },\n  //           error: function (error) { console.log(error) },\n  //           onmessage: function (msg, jsep) {\n  //             // console.log(`iteration ${i} new message received! msg::`, msg)\n  //             // console.log(`iteration ${i} the accompanying jsep was::`, jsep)\n\n  //             if (jsep !== undefined && jsep !== null) {\n  //               // console.log(`iteration ${i} jsep was not null or undefined THIS IS GOOD`)\n\n  //               const foundStream = vm.streaming.find(s => s.id === i)\n\n  //               if (jsep.type === 'offer') {\n  //               //   console.log(`iteration ${i} the jsep type was an offer, lets make an answer`)\n  //                 foundStream.plugin.createAnswer(\n  //                   {\n  //                     jsep,\n  //                     media: { audioSend: false, videoSend: false },\n  //                     success: function (jsep) {\n  //                       // console.log(`iteration ${i} sending a message to request the stream starts`)\n  //                       const body = { 'request': 'start' }\n\n  //                       foundStream.plugin.send({ 'message': body, 'jsep': jsep })\n  //                     },\n  //                     error: function (error) {\n  //                       Janus.error('WebRTC error:', error)\n  //                     }\n  //                   }\n  //                 )\n  //               }\n  //             }\n  //           },\n  //           onremotestream: function (stream) {\n  //           //   console.log(`iteration ${i} on remote stream being called`)\n  //             const element = document.getElementById(`janusVideoPGM`)\n  //             Janus.attachMediaStream(element, stream)\n  //           },\n  //         })\n  //     }\n  //   }\n  }\n}\n</script>\n\n// <style scoped lang=\"sass\">\n// .janus-video\n//   min-width: 100% !important\n//   // width: atuo\n//   min-height: 100% !important\n//   // height: auto\n//   object-fit: fill\n//   background: black\n//   display: block\n// </style>"],"sourceRoot":"src/views"}]}