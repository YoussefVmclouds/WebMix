{"remainingRequest":"/Users/youssef/Downloads/WebMix/node_modules/babel-loader/lib/index.js!/Users/youssef/Downloads/WebMix/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/youssef/Downloads/WebMix/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/youssef/Downloads/WebMix/src/views/JanusVideo.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/youssef/Downloads/WebMix/src/views/JanusVideo.vue","mtime":1648222515887},{"path":"/Users/youssef/Downloads/WebMix/node_modules/cache-loader/dist/cjs.js","mtime":1644235715462},{"path":"/Users/youssef/Downloads/WebMix/node_modules/babel-loader/lib/index.js","mtime":1644235715748},{"path":"/Users/youssef/Downloads/WebMix/node_modules/cache-loader/dist/cjs.js","mtime":1644235715462},{"path":"/Users/youssef/Downloads/WebMix/node_modules/vue-loader/lib/index.js","mtime":1644235714281}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["JanusVideo.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <!-- Janus Video -->\n  <div>\n    <div\n    :key=\"camera\"\n      v-for=\"(camera, i) in cameras\">\n    <video\n      :id=\"`janusVideo${i}`\"\n      class=\"janus-video\"\n      playsinline\n      autoplay\n      controls\n      muted\n    ></video>\n    <!-- <audio\n    :id=\"`janusAudio${i}`\"\n    :ref=\"`janusAudio${i}`\"\n    :src=\"`janusVideo${i}`\"\n    autoplay\n    muted=\"false\"\n    ></audio> -->\n    <!-- <av-bars :ref-link=\"`janusAudio${i}`\" /> -->\n    </div>\n  </div>\n</template>\n\n<script>\nimport Janus from './janus'\n\nexport default {\n  name: 'JanusVideo',\n  props: {\n    // cameras: {\n    //   type: Array,\n    //   required: true\n    // },\n    janus: {\n      type: Object\n    }\n  },\n  data () {\n    return {\n      streaming: [],\n      cameras: [],\n      serverList:[],\n      watchID:null,\n    }\n  },\n  mounted () {\n    this.initJanus()\n  },\n  methods: {\n    // Init Janus\n    initJanus () {\n        //  this.janus.attach.bind({x:1})\n         this.janus.attach(\n          {\n            opaqueId: 'test-',\n\n            plugin: 'janus.plugin.streaming',\n            success:  (pluginHandle) =>{\n            // console.log(`iteration ${i} janus attach - onSuccess called, plugin handle::`, pluginHandle)\n              if (pluginHandle) {\n                // console.log('pluginHandle=', pluginHandle)\n\n\n                let body = { 'request': 'list' }\n                // let body = { 'request': 'watch', id: parseInt('123') }\n\n                // console.log(`iteration ${i} sending watch request::`)\n                      this.watchID = this.$route.query.prv\n                        console.log(\"looking for (\",this.watchID,\") as cameras preview\")\n\n                pluginHandle.send({ 'message': body,\n                  success: (result)=> {\n                    console.log(result)\n                    this.serverList=result.list\n                    this.serverList.forEach(element => {\n                    if(this.watchID !=null){\n                      if(element.description.search(this.watchID)>-1){\n                        this.cameras.push(element.id)\n                      }\n                      }\n                    });\n                    // test\n  const vm = this\nfor (let i = 0; i < vm.cameras.length; i++) {\n        // console.log(`this is iteration ${i.id} of the for loop`)\n        this.janus.attach(\n          {\n            opaqueId: 'test-' + i,\n\n            plugin: 'janus.plugin.streaming',\n            success: function (pluginHandle) {\n              // console.log(`iteration ${i} janus attach - onSuccess called, plugin handle::`, pluginHandle)\n              if (pluginHandle) {\n                // console.log('pluginHandle=', pluginHandle)\n                vm.streaming.push({ id: i, plugin: pluginHandle })\n                // vm.streaming.push({ id: parseInt('1'), plugin: pluginHandle })\n                let body = { 'request': 'watch', id: vm.cameras[i] }\n                // let body = { 'request': 'watch', id: parseInt('1') }\n                // console.log(`iteration ${i} sending watch request::${body}`)\n                pluginHandle.send({ 'message': body })\n              }\n            },\n            error: function (error) { console.log(error) },\n            onmessage: function (msg, jsep) {\n              // console.log(`iteration ${i} new message received! msg::`, msg)\n              // console.log(`iteration ${i} the accompanying jsep was::`, jsep)\n\n              if (jsep !== undefined && jsep !== null) {\n                // console.log(`iteration ${i} jsep was not null or undefined THIS IS GOOD`)\n\n                const foundStream = vm.streaming.find(s => s.id === i)\n\n                if (jsep.type === 'offer') {\n                //   console.log(`iteration ${i} the jsep type was an offer, lets make an answer`)\n                  foundStream.plugin.createAnswer(\n                    {\n                      jsep,\n                      media: { audioSend: false, videoSend: false },\n                      success: function (jsep) {\n                        // console.log(`iteration ${i} sending a message to request the stream starts`)\n                        const body = { 'request': 'start' }\n\n                        foundStream.plugin.send({ 'message': body, 'jsep': jsep })\n                      },\n                      error: function (error) {\n                        Janus.error('WebRTC error:', error)\n                      }\n                    }\n                  )\n                }\n              }\n            },\n            onremotestream: function (stream) {\n            //   console.log(`iteration ${i} on remote stream being called`)\n              const element = document.getElementById(`janusVideo${i}`)\n              // const elementAudio = document.getElementById(`janusAudio${i}`)\n              Janus.attachMediaStream(element, stream)\n              // Janus.attachMediaStream(elementAudio, stream)\n            },\n          })\n      }\n                    // end test\n                    },\n                  error: function (error) { console.log(error) },\n\n                    })\n              }\n            }});\n      // const vm = this\n      // for (let i = 0; i < vm.cameras.length; i++) {\n      //   // console.log(`this is iteration ${i.id} of the for loop`)\n      //   this.janus.attach(\n      //     {\n      //       opaqueId: 'test-' + i,\n\n      //       plugin: 'janus.plugin.streaming',\n      //       success: function (pluginHandle) {\n      //         // console.log(`iteration ${i} janus attach - onSuccess called, plugin handle::`, pluginHandle)\n      //         if (pluginHandle) {\n      //           // console.log('pluginHandle=', pluginHandle)\n\n      //           // vm.streaming.push({ id: vm.cameras[i], plugin: pluginHandle })\n      //           vm.streaming.push({ id: parseInt('1'), plugin: pluginHandle })\n\n      //           // let body = { 'request': 'watch', id: i }\n      //           let body = { 'request': 'watch', id: parseInt('1') }\n\n      //           // console.log(`iteration ${i} sending watch request::${body}`)\n\n      //           pluginHandle.send({ 'message': body })\n      //         }\n      //       },\n      //       error: function (error) { console.log(error) },\n      //       onmessage: function (msg, jsep) {\n      //         // console.log(`iteration ${i} new message received! msg::`, msg)\n      //         // console.log(`iteration ${i} the accompanying jsep was::`, jsep)\n\n      //         if (jsep !== undefined && jsep !== null) {\n      //           // console.log(`iteration ${i} jsep was not null or undefined THIS IS GOOD`)\n\n      //           const foundStream = vm.streaming.find(s => s.id === i)\n\n      //           if (jsep.type === 'offer') {\n      //           //   console.log(`iteration ${i} the jsep type was an offer, lets make an answer`)\n      //             foundStream.plugin.createAnswer(\n      //               {\n      //                 jsep,\n      //                 media: { audioSend: false, videoSend: false },\n      //                 success: function (jsep) {\n      //                   // console.log(`iteration ${i} sending a message to request the stream starts`)\n      //                   const body = { 'request': 'start' }\n\n      //                   foundStream.plugin.send({ 'message': body, 'jsep': jsep })\n      //                 },\n      //                 error: function (error) {\n      //                   Janus.error('WebRTC error:', error)\n      //                 }\n      //               }\n      //             )\n      //           }\n      //         }\n      //       },\n      //       onremotestream: function (stream) {\n      //       //   console.log(`iteration ${i} on remote stream being called`)\n      //         const element = document.getElementById(`janusVideo${i}`)\n      //         Janus.attachMediaStream(element, stream)\n      //       },\n      //     })\n      // }\n    }\n  }\n}\n</script>\n\n// <style scoped lang=\"sass\">\n// .janus-video\n//   width: 350px\n//   height: 200px\n//   background: black\n//   border: 5px solid rgba(35, 177, 104, 0.83)\n//   margin: 30px 10px\n// </style>\n\n<style scoped lang=\"sass\">\n.janus-video\n  width: 200px\n  height: 115px\n  background: black\n  border: 3px solid #666\n  margin: 5px 10px\n</style>"],"sourceRoot":"src/views"}]}