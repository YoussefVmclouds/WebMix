{"remainingRequest":"/Users/youssef/Downloads/WebMix/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/youssef/Downloads/WebMix/src/views/JanusVideoPGM.vue?vue&type=style&index=1&id=1f500db4&scoped=true&lang=sass&","dependencies":[{"path":"/Users/youssef/Downloads/WebMix/src/views/JanusVideoPGM.vue","mtime":1647862718990},{"path":"/Users/youssef/Downloads/WebMix/node_modules/css-loader/dist/cjs.js","mtime":1644235714167},{"path":"/Users/youssef/Downloads/WebMix/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1644235714623},{"path":"/Users/youssef/Downloads/WebMix/node_modules/postcss-loader/src/index.js","mtime":1644235714166},{"path":"/Users/youssef/Downloads/WebMix/node_modules/sass-loader/dist/cjs.js","mtime":1644235715640},{"path":"/Users/youssef/Downloads/WebMix/node_modules/cache-loader/dist/cjs.js","mtime":1644235715462},{"path":"/Users/youssef/Downloads/WebMix/node_modules/vue-loader/lib/index.js","mtime":1644235714281}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouamFudXMtdmlkZW8KICAvLyBtaW4td2lkdGg6IDEwMCUgIWltcG9ydGFudAogIC8vIHdpZHRoOiBhdHVvCiAgLy8gbWluLWhlaWdodDogMTAwJSAhaW1wb3J0YW50CiAgLy8gaGVpZ2h0OiBhdXRvCiAgb2JqZWN0LWZpdDogZmlsbAogIGJhY2tncm91bmQ6IGJsYWNrCiAgZGlzcGxheTogYmxvY2sK"},{"version":3,"sources":["JanusVideoPGM.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"JanusVideoPGM.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <!-- Janus Video -->\n  <div>\n    <div\n    :key=\"camera\"\n      v-for=\"(camera, i) in cameras\">\n    <video\n      :id=\"`janusVideo${i}`\"\n      class=\"janus-video\"\n      playsinline\n      autoplay\n      controls\n      width= 100%\n      height= auto\n      muted\n    ></video>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Janus from './janus'\n\nexport default {\n  name: 'JanusVideo',\n  props: {\n    // cameras: {\n    //   type: Array,\n    //   required: true\n    // },\n    janus: {\n      type: Object\n    }\n  },\n  data () {\n    return {\n      streaming: [],\n      cameras: ['Mek']\n    }\n  },\n  mounted () {\n    this.initJanus()\n  },\n  methods: {\n    // Init Janus\n    initJanus () {\n         this.janus.attach(\n          {\n            opaqueId: 'test-',\n\n            plugin: 'janus.plugin.streaming',\n            success: function (pluginHandle) {\n              // console.log(`iteration ${i} janus attach - onSuccess called, plugin handle::`, pluginHandle)\n              if (pluginHandle) {\n                // console.log('pluginHandle=', pluginHandle)\n\n\n                let body = { 'request': 'list' }\n                // let body = { 'request': 'watch', id: parseInt('123') }\n\n                // console.log(`iteration ${i} sending watch request::`)\n\n                pluginHandle.send({ 'message': body,success: function(result) {console.log(result)} })\n              }\n            }});\n      const vm = this\n      for (let i = 0; i < this.cameras.length; i++) {\n        // console.log(`this is iteration ${i} of the for loop`)\n        this.janus.attach(\n          {\n            opaqueId: 'test-' + i,\n\n            plugin: 'janus.plugin.streaming',\n            success: function (pluginHandle) {\n              // console.log(`iteration ${i} janus attach - onSuccess called, plugin handle::`, pluginHandle)\n              if (pluginHandle) {\n                // console.log('pluginHandle=', pluginHandle)\n\n                vm.streaming.push({ id: i, plugin: pluginHandle })\n\n                let body = { 'request': 'watch', id: 123 }\n                // let body = { 'request': 'watch', id: parseInt('123') }\n\n                // console.log(`iteration ${i} sending watch request::`)\n\n                pluginHandle.send({ 'message': body })\n              }\n            },\n            error: function (error) { console.log(error) },\n            onmessage: function (msg, jsep) {\n              // console.log(`iteration ${i} new message received! msg::`, msg)\n              // console.log(`iteration ${i} the accompanying jsep was::`, jsep)\n\n              if (jsep !== undefined && jsep !== null) {\n                // console.log(`iteration ${i} jsep was not null or undefined THIS IS GOOD`)\n\n                const foundStream = vm.streaming.find(s => s.id === i)\n\n                if (jsep.type === 'offer') {\n                //   console.log(`iteration ${i} the jsep type was an offer, lets make an answer`)\n                  foundStream.plugin.createAnswer(\n                    {\n                      jsep,\n                      media: { audioSend: false, videoSend: false },\n                      success: function (jsep) {\n                        // console.log(`iteration ${i} sending a message to request the stream starts`)\n                        const body = { 'request': 'start' }\n\n                        foundStream.plugin.send({ 'message': body, 'jsep': jsep })\n                      },\n                      error: function (error) {\n                        Janus.error('WebRTC error:', error)\n                      }\n                    }\n                  )\n                }\n              }\n            },\n            onremotestream: function (stream) {\n            //   console.log(`iteration ${i} on remote stream being called`)\n              const element = document.getElementById(`janusVideo${i}`)\n              Janus.attachMediaStream(element, stream)\n            },\n          })\n      }\n    }\n  }\n}\n</script>\n\n// <style scoped lang=\"sass\">\n// .janus-video\n//   width: 350px\n//   height: 200px\n//   background: black\n//   border: 5px solid rgba(35, 177, 104, 0.83)\n//   margin: 30px 10px\n// </style>\n\n<style scoped lang=\"sass\">\n.janus-video\n  // min-width: 100% !important\n  // width: atuo\n  // min-height: 100% !important\n  // height: auto\n  object-fit: fill\n  background: black\n  display: block\n</style>"]}]}