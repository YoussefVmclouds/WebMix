{"remainingRequest":"/Users/youssef/Downloads/WebMix/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/youssef/Downloads/WebMix/src/views/JanusVideoPGM.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/youssef/Downloads/WebMix/src/views/JanusVideoPGM.vue","mtime":1648137724439},{"path":"/Users/youssef/Downloads/WebMix/node_modules/cache-loader/dist/cjs.js","mtime":1644235715462},{"path":"/Users/youssef/Downloads/WebMix/node_modules/babel-loader/lib/index.js","mtime":1644235715748},{"path":"/Users/youssef/Downloads/WebMix/node_modules/cache-loader/dist/cjs.js","mtime":1644235715462},{"path":"/Users/youssef/Downloads/WebMix/node_modules/vue-loader/lib/index.js","mtime":1644235714281}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["JanusVideoPGM.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAmfile":"JanusVideoPGM.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <!-- Janus Video -->\n  <div>\n    <div>\n    <video\n      :id=\"`janusVideoPGM`\"\n      class=\"janus-video\"\n      playsinline\n      autoplay\n      width= 100%\n      height= auto\n      controls\n      muted\n    ></video>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Janus from './janus'\n\nexport default {\n  name: 'JanusVideo',\n  props: {\n    // cameras: {\n    //   type: Array,\n    //   required: true\n    // },\n    janus: {\n      type: Object\n    }\n  },\n  data () {\n    return {\n      streaming: [],\n      cameraPGM: [],\n      serverList:[],\n      watchID:null,\n    }\n  },\n  mounted () {\n    this.initJanus()\n  },\n  methods: {\n    //test\n        initJanus () {\n        //  this.janus.attach.bind({x:1})\n         this.janus.attach(\n          {\n            opaqueId: 'test-',\n            plugin: 'janus.plugin.streaming',\n            success:  (pluginHandle) =>{\n            // console.log(`iteration ${i} janus attach - onSuccess called, plugin handle::`, pluginHandle)\n              if (pluginHandle) {\n                // console.log('pluginHandle=', pluginHandle)\n                let body = { 'request': 'list' }\n                // let body = { 'request': 'watch', id: parseInt('123') }\n                // console.log(`iteration ${i} sending watch request::`)\n                      this.watchID = this.$route.query.pgm\n                        console.log(\"Looking for (\",this.watchID, \") as PGM view\")\n                pluginHandle.send({ 'message': body,\n                  success: (result)=> {\n                    this.serverList=result.list\n                    this.serverList.forEach(element => {\n                    if(this.watchID !=null){\n                      if(element.description.search(this.watchID)>-1){\n                        this.cameraPGM.push(element.id)\n                      }\n                    }\n                    });\n                    // test\n  const vm = this\nfor (let i = 0; i < vm.cameraPGM.length; i++) {\n        // console.log(`this is iteration ${i.id} of the for loop`)\n        this.janus.attach(\n          {\n            opaqueId: 'test-' + i,\n\n            plugin: 'janus.plugin.streaming',\n            success: function (pluginHandle) {\n              // console.log(`iteration ${i} janus attach - onSuccess called, plugin handle::`, pluginHandle)\n              if (pluginHandle) {\n                // console.log('pluginHandle=', pluginHandle)\n                vm.streaming.push({ id: i, plugin: pluginHandle })\n                // vm.streaming.push({ id: parseInt('1'), plugin: pluginHandle })\n                let body = { 'request': 'watch', id: vm.cameraPGM[i] }\n                // let body = { 'request': 'watch', id: parseInt('1') }\n                // console.log(`iteration ${i} sending watch request::${body}`)\n                pluginHandle.send({ 'message': body })\n              }\n            },\n            error: function (error) { console.log(error) },\n            onmessage: function (msg, jsep) {\n              // console.log(`iteration ${i} new message received! msg::`, msg)\n              // console.log(`iteration ${i} the accompanying jsep was::`, jsep)\n\n              if (jsep !== undefined && jsep !== null) {\n                // console.log(`iteration ${i} jsep was not null or undefined THIS IS GOOD`)\n\n                const foundStream = vm.streaming.find(s => s.id === i)\n\n                if (jsep.type === 'offer') {\n                //   console.log(`iteration ${i} the jsep type was an offer, lets make an answer`)\n                  foundStream.plugin.createAnswer(\n                    {\n                      jsep,\n                      media: { audioSend: false, videoSend: false },\n                      success: function (jsep) {\n                        // console.log(`iteration ${i} sending a message to request the stream starts`)\n                        const body = { 'request': 'start' }\n\n                        foundStream.plugin.send({ 'message': body, 'jsep': jsep })\n                      },\n                      error: function (error) {\n                        Janus.error('WebRTC error:', error)\n                      }\n                    }\n                  )\n                }\n              }\n            },\n            onremotestream: function (stream) {\n            //   console.log(`iteration ${i} on remote stream being called`)\n              const element = document.getElementById(`janusVideoPGM`)\n              Janus.attachMediaStream(element, stream)\n            },\n          })\n      }\n                    // end test\n                    },\n                  error: function (error) { console.log(error) },\n\n                    })\n              }\n            }});\n      const vm = this\n      for (let i = 0; i < vm.cameraPGM.length; i++) {\n        // console.log(`this is iteration ${i.id} of the for loop`)\n        this.janus.attach(\n          {\n            opaqueId: 'test-' + i,\n\n            plugin: 'janus.plugin.streaming',\n            success: function (pluginHandle) {\n              // console.log(`iteration ${i} janus attach - onSuccess called, plugin handle::`, pluginHandle)\n              if (pluginHandle) {\n                // console.log('pluginHandle=', pluginHandle)\n\n                // vm.streaming.push({ id: vm.cameras[i], plugin: pluginHandle })\n                vm.streaming.push({ id: parseInt('1'), plugin: pluginHandle })\n\n                // let body = { 'request': 'watch', id: i }\n                let body = { 'request': 'watch', id: parseInt('1') }\n\n                // console.log(`iteration ${i} sending watch request::${body}`)\n\n                pluginHandle.send({ 'message': body })\n              }\n            },\n            error: function (error) { console.log(error) },\n            onmessage: function (msg, jsep) {\n              // console.log(`iteration ${i} new message received! msg::`, msg)\n              // console.log(`iteration ${i} the accompanying jsep was::`, jsep)\n\n              if (jsep !== undefined && jsep !== null) {\n                // console.log(`iteration ${i} jsep was not null or undefined THIS IS GOOD`)\n\n                const foundStream = vm.streaming.find(s => s.id === i)\n\n                if (jsep.type === 'offer') {\n                //   console.log(`iteration ${i} the jsep type was an offer, lets make an answer`)\n                  foundStream.plugin.createAnswer(\n                    {\n                      jsep,\n                      media: { audioSend: false, videoSend: false },\n                      success: function (jsep) {\n                        // console.log(`iteration ${i} sending a message to request the stream starts`)\n                        const body = { 'request': 'start' }\n\n                        foundStream.plugin.send({ 'message': body, 'jsep': jsep })\n                      },\n                      error: function (error) {\n                        Janus.error('WebRTC error:', error)\n                      }\n                    }\n                  )\n                }\n              }\n            },\n            onremotestream: function (stream) {\n            //   console.log(`iteration ${i} on remote stream being called`)\n              const element = document.getElementById(`janusVideo${i}`)\n              Janus.attachMediaStream(element, stream)\n            },\n          })\n      }\n    }\n\n    //end test\n    //Orignial\n    // Init Janus\n  //   initJanus () {\n  //        this.janus.attach(\n  //         {\n  //           opaqueId: 'test-',\n\n  //           plugin: 'janus.plugin.streaming',\n  //           success: function (pluginHandle) {\n  //             // console.log(`iteration ${i} janus attach - onSuccess called, plugin handle::`, pluginHandle)\n  //             if (pluginHandle) {\n  //               // console.log('pluginHandle=', pluginHandle)\n\n\n  //               let body = { 'request': 'list' }\n  //               // let body = { 'request': 'watch', id: parseInt('123') }\n\n  //               // console.log(`iteration ${i} sending watch request::`)\n\n  //               pluginHandle.send({ 'message': body,success: function(result) {console.log(result)} })\n  //             }\n  //           }});\n  //     const vm = this\n  //     for (let i = 0; i < this.cameraPGM.length; i++) {\n  //       // console.log(`this is iteration ${i} of the for loop`)\n  //       this.janus.attach(\n  //         {\n  //           opaqueId: 'test-' + i,\n\n  //           plugin: 'janus.plugin.streaming',\n  //           success: function (pluginHandle) {\n  //             // console.log(`iteration ${i} janus attach - onSuccess called, plugin handle::`, pluginHandle)\n  //             if (pluginHandle) {\n  //               // console.log('pluginHandle=', pluginHandle)\n\n  //               vm.streaming.push({ id: i, plugin: pluginHandle })\n\n  //               // let body = { 'request': 'watch', id: i }\n  //               let body = { 'request': 'watch', id: parseInt('123') }\n\n  //               // console.log(`iteration ${i} sending watch request::`)\n\n  //               pluginHandle.send({ 'message': body })\n  //             }\n  //           },\n  //           error: function (error) { console.log(error) },\n  //           onmessage: function (msg, jsep) {\n  //             // console.log(`iteration ${i} new message received! msg::`, msg)\n  //             // console.log(`iteration ${i} the accompanying jsep was::`, jsep)\n\n  //             if (jsep !== undefined && jsep !== null) {\n  //               // console.log(`iteration ${i} jsep was not null or undefined THIS IS GOOD`)\n\n  //               const foundStream = vm.streaming.find(s => s.id === i)\n\n  //               if (jsep.type === 'offer') {\n  //               //   console.log(`iteration ${i} the jsep type was an offer, lets make an answer`)\n  //                 foundStream.plugin.createAnswer(\n  //                   {\n  //                     jsep,\n  //                     media: { audioSend: false, videoSend: false },\n  //                     success: function (jsep) {\n  //                       // console.log(`iteration ${i} sending a message to request the stream starts`)\n  //                       const body = { 'request': 'start' }\n\n  //                       foundStream.plugin.send({ 'message': body, 'jsep': jsep })\n  //                     },\n  //                     error: function (error) {\n  //                       Janus.error('WebRTC error:', error)\n  //                     }\n  //                   }\n  //                 )\n  //               }\n  //             }\n  //           },\n  //           onremotestream: function (stream) {\n  //           //   console.log(`iteration ${i} on remote stream being called`)\n  //             const element = document.getElementById(`janusVideoPGM`)\n  //             Janus.attachMediaStream(element, stream)\n  //           },\n  //         })\n  //     }\n  //   }\n  }\n}\n</script>\n\n// <style scoped lang=\"sass\">\n// .janus-video\n//   min-width: 100% !important\n//   // width: atuo\n//   min-height: 100% !important\n//   // height: auto\n//   object-fit: fill\n//   background: black\n//   display: block\n// </style>"]}]}